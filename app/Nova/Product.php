<?php

namespace App\Nova;

use Ebess\AdvancedNovaMediaLibrary\Fields\Images;
use Emilianotisato\NovaTinyMCE\NovaTinyMCE;
use Froala\NovaFroalaField\Froala;
use Illuminate\Http\Request;
use Laravel\Nova\Fields\BelongsTo;
use Laravel\Nova\Fields\Boolean;
use Laravel\Nova\Fields\ID;
use Laravel\Nova\Fields\Number;
use Laravel\Nova\Fields\Text;
use Laravel\Nova\Fields\Textarea;
use Laravel\Nova\Http\Requests\NovaRequest;
use NumaxLab\NovaCKEditor5Classic\CKEditor5Classic;
use Maatwebsite\LaravelNovaExcel\Actions\DownloadExcel;

class Product extends Resource
{
    /**
     * The model the resource corresponds to.
     *
     * @var string
     */
    public static $model = \App\Models\Product::class;

    /**
     * The single value that should be used to represent the resource when being displayed.
     *
     * @var string
     */
    public static $title = 'name';

    /**
     * The columns that should be searched.
     *
     * @var array
     */
    public static $search = [
        'id',
        'name'
    ];

    public static function label()
    {
        return 'Məhsullar'; // TODO: Change the autogenerated stub
    }

    /**
     * Get the fields displayed by the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function fields(Request $request)
    {
        return [
            ID::make(__('ID'), 'id')->sortable(),
            BelongsTo::make('Kategoriya', 'category', Category::class),
            Text::make('Adı', 'name')->translatable(),
            Number::make('Qiymət', 'price')->step(0.01),
            Text::make('İstehsalçı şirkət', 'company_name')->translatable(),
            Text::make('Tərkib', 'composition')->translatable(),
            Text::make('İstehsalçı ölkə', 'country_name')->translatable(),
            Text::make('Qablaşdırma', 'pack')->translatable(),

            Froala::make('Məlumat AZ', 'text->az')->withMeta(['value' => $this->getTranslation('text', 'az')])->withFiles('public'),
            Froala::make('Məlumat EN', 'text->en')->withMeta(['value' => $this->getTranslation('text', 'en', false)])->withFiles('public'),
            Froala::make('Məlumat RU', 'text->ru')->withMeta(['value' => $this->getTranslation('text', 'ru', false)])->withFiles('public'),

//            Froala::make('Tədbigi', 'applying')->translatable(),

            Froala::make('Tədbigi AZ', 'applying->az')->withMeta(['value' => $this->getTranslation('applying', 'az')])->withFiles('public'),
            Froala::make('Tədbigi EN', 'applying->en')->withMeta(['value' => $this->getTranslation('applying', 'en', false)])->withFiles('public'),
            Froala::make('Tədbigi RU', 'applying->ru')->withMeta(['value' => $this->getTranslation('applying', 'ru', false)])->withFiles('public'),

//            Froala::make('Üstünlüklər', 'advantage')->translatable(),

            Froala::make('Üstünlüklər AZ', 'advantage->az')->withMeta(['value' => $this->getTranslation('advantage', 'az')])->withFiles('public'),
            Froala::make('Üstünlüklər EN', 'advantage->en')->withMeta(['value' => $this->getTranslation('advantage', 'en', false)])->withFiles('public'),
            Froala::make('Üstünlüklər RU', 'advantage->ru')->withMeta(['value' => $this->getTranslation('advantage', 'ru', false)])->withFiles('public'),

//            Froala::make('Təlükəsizlik qaydaları', 'safety_regulations')->translatable(),

            Froala::make('Təlükəsizlik qaydaları AZ', 'safety_regulations->az')->withMeta(['value' => $this->getTranslation('safety_regulations', 'az')])->withFiles('public'),
            Froala::make('Təlükəsizlik qaydaları EN', 'safety_regulations->en')->withMeta(['value' => $this->getTranslation('safety_regulations', 'en', false)])->withFiles('public'),
            Froala::make('Təlükəsizlik qaydaları RU', 'safety_regulations->ru')->withMeta(['value' => $this->getTranslation('safety_regulations', 'ru', false)])->withFiles('public'),


//            Froala::make('Zərəvericilər', 'pests')->translatable(),

            Froala::make('Zərəvericilər AZ', 'pests->az')->withMeta(['value' => $this->getTranslation('pests', 'az')])->withFiles('public'),
            Froala::make('Zərəvericilər EN', 'pests->en')->withMeta(['value' => $this->getTranslation('pests', 'en', false)])->withFiles('public'),
            Froala::make('Zərəvericilər RU', 'pests->ru')->withMeta(['value' => $this->getTranslation('pests', 'ru', false)])->withFiles('public'),

//            Froala::make('Göbelekler', 'gobelekler')->translatable(),

            Froala::make('Göbelekler AZ', 'gobelekler->az')->withMeta(['value' => $this->getTranslation('gobelekler', 'az')])->withFiles('public'),
            Froala::make('Göbelekler EN', 'gobelekler->en')->withMeta(['value' => $this->getTranslation('gobelekler', 'en', false)])->withFiles('public'),
            Froala::make('Göbelekler RU', 'gobelekler->ru')->withMeta(['value' => $this->getTranslation('gobelekler', 'ru', false)])->withFiles('public'),

//            Froala::make('Yabanı otlar', 'yabani_otlar')->translatable(),

            Froala::make('Yabanı otlar AZ', 'yabani_otlar->az')->withMeta(['value' => $this->getTranslation('yabani_otlar', 'az')])->withFiles('public'),
            Froala::make('Yabanı otlar EN', 'yabani_otlar->en')->withMeta(['value' => $this->getTranslation('yabani_otlar', 'en', false)])->withFiles('public'),
            Froala::make('Yabanı otlar RU', 'yabani_otlar->ru')->withMeta(['value' => $this->getTranslation('yabani_otlar', 'ru', false)])->withFiles('public'),

            Boolean::make('is_stock', 'is_stock'),
            Images::make('Şəkil', 'main'),
        ];
    }


    /*public function exportedFields(Request $request) {
        return [
            Text::make('Məlumat', 'text', function ($value) {
                return strip_tags(trim(html_entity_decode($value,   ENT_QUOTES, 'UTF-8'), "\xc2\xa0"));
            }),
            Text::make('Tədbigi', 'applying', function ($value) {
                return strip_tags(trim(html_entity_decode($value,   ENT_QUOTES, 'UTF-8'), "\xc2\xa0"));
            }),
            Text::make('Üstünlüklər', 'advantage', function ($value) {
                return strip_tags(trim(html_entity_decode($value,   ENT_QUOTES, 'UTF-8'), "\xc2\xa0"));
            }),
            Text::make('Təlükəsizlik qaydaları', 'safety_regulations', function ($value) {
                return strip_tags(trim(html_entity_decode($value,   ENT_QUOTES, 'UTF-8'), "\xc2\xa0"));
            }),
            Text::make('Zərəvericilər', 'pests', function ($value) {
                return strip_tags(trim(html_entity_decode($value,   ENT_QUOTES, 'UTF-8'), "\xc2\xa0"));
            }),
            Text::make('Göbelekler', 'gobelekler', function ($value) {
                return strip_tags(trim(html_entity_decode($value,   ENT_QUOTES, 'UTF-8'), "\xc2\xa0"));
            }),
            Text::make('Yabanı otlar', 'yabani_otlar', function ($value) {
                return strip_tags(trim(html_entity_decode($value,   ENT_QUOTES, 'UTF-8'), "\xc2\xa0"));
            }),

        ];
    }*/

    /**
     * Get the cards available for the request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function cards(Request $request)
    {
        return [];
    }

    /**
     * Get the filters available for the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function filters(Request $request)
    {
        return [];
    }

    /**
     * Get the lenses available for the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function lenses(Request $request)
    {
        return [];
    }

    /**
     * Get the actions available for the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function actions(Request $request)
    {
        return [

        ];
    }
}
